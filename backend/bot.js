require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const db = require('./db/db');
const dayjs = require('dayjs');
const cron = require('node-cron');
const crypto = require('crypto');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω');

const userStates = {}; // —Ç–≤–æ–π —Å—Ç–µ–π—Ç –¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

const helpMessage = `üõ† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
+10000 –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
-500 –∫–æ—Ñ–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/todo <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/tasks ‚Äî –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/goals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏
/train ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
 /budget [YYYY-MM] ‚Äî –±—é–¥–∂–µ—Ç—ã –º–µ—Å—è—Ü–∞
/checkon [morning|evening|all] ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/checkoff [morning|evening|all] ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`;

function parseDate(text) {
  const months = {
    '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
    '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
    '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
  };
  const today = new Date();
  text = text.trim().toLowerCase();

  const matchNumeric = text.match(/^(\d{1,2})[./](\d{1,2})$/);
  if (matchNumeric) {
    const day = parseInt(matchNumeric[1], 10);
    const month = parseInt(matchNumeric[2], 10) - 1;
    const year = new Date(today.getFullYear(), month, day) < today
      ? today.getFullYear() + 1 : today.getFullYear();
    return `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
  }

  const matchText = text.match(/^(\d{1,2})\s+([–∞-—è—ë]+)/);
  if (matchText) {
    const day = parseInt(matchText[1], 10);
    const monthName = matchText[2];
    const month = months[monthName];
    if (!month) return null;
    const date = new Date(today.getFullYear(), month - 1, day);
    const year = date < today ? today.getFullYear() + 1 : today.getFullYear();
    return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
  }

  return null;
}

// ========= –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É ========= //
bot.onText(/\/connect (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const token = match[1].trim();

  db.get(`SELECT user_id FROM telegram_tokens WHERE token = ? AND used = 0`, [token], (err, row) => {
    if (err) {
      console.error(err);
      return bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    if (!row) {
      return bot.sendMessage(chatId, '‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.');
    }

    const userId = row.user_id;

    db.run('INSERT OR REPLACE INTO telegram_users (user_id, chat_id) VALUES (?, ?)', [userId, chatId], (insertErr) => {
      if (insertErr) {
        console.error(insertErr);
        return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å Telegram —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º.');
      }

      db.run('UPDATE telegram_tokens SET used = 1 WHERE token = ?', [token]);
      bot.sendMessage(chatId, '‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    });
  });
});

// ========= –£–¢–ò–õ–ò–¢–ê ========= //
function getUserId(chatId, callback) {
  db.get('SELECT user_id FROM telegram_users WHERE chat_id = ?', [chatId], (err, row) => {
    if (err || !row) return callback(null);
    callback(row.user_id);
  });
}

// user_id -> chat_id (–¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫)
function getChatIdByUserId(userId) {
  return new Promise((resolve) => {
    db.get('SELECT chat_id FROM telegram_users WHERE user_id = ?', [userId], (err, row) => {
      resolve(row?.chat_id || null);
    });
  });
}

function ymd(d = new Date()) {
  return d.toISOString().slice(0, 10);
}

function currentMonth() {
  const d = new Date();
  const m = String(d.getMonth() + 1).padStart(2, '0');
  return `${d.getFullYear()}-${m}`;
}

// ===== helpers for weekly scoring (—Å–∫–æ—Ä–∏–Ω–≥) =====
const clamp01 = (x) => Math.max(0, Math.min(1, x));
const toDateOnly = (s) => (s || '').slice(0, 10);

function prevWeekRange() {
  // –ø—Ä–æ—à–ª—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –ø—Ä–æ—à–ª–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  const now = new Date();
  const dow = now.getDay() === 0 ? 7 : now.getDay(); // 1..7
  const lastMonday = new Date(now);
  lastMonday.setDate(now.getDate() - (dow + 6));
  const lastSunday = new Date(lastMonday);
  lastSunday.setDate(lastMonday.getDate() + 6);
  const s = lastMonday.toISOString().slice(0, 10);
  const e = lastSunday.toISOString().slice(0, 10);
  return { startIso: s, endIso: e, label: `${s} ‚Äî ${e}` };
}

function daysInMonthStr(yyyyMM) {
  const [y, m] = yyyyMM.split('-').map(Number);
  return new Date(y, m, 0).getDate();
}

// –ü–æ–¥—Å—á—ë—Ç —Å–∫–æ—Ä–∏–Ω–≥–∞ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É backend/analytics)
async function computeScoreForPeriod(userId, startIso, endIso) {
  const startTs = `${startIso} 00:00:00`;
  const endTs = `${endIso} 23:59:59`;

  const checks = await new Promise((resolve) => {
    db.all(
      `SELECT date, sleep_hours, mood, energy, workout_done
       FROM daily_checks
       WHERE user_id = ? AND date BETWEEN ? AND ?`,
      [userId, startIso, endIso],
      (err, rows) => resolve(rows || [])
    );
  });

  const expenses = await new Promise((resolve) => {
    db.all(
      `SELECT date(date) AS d, SUM(amount) AS spent
       FROM finances
       WHERE user_id = ?
         AND type = 'expense'
         AND date BETWEEN ? AND ?
       GROUP BY date(date)`,
      [userId, startTs, endTs],
      (err, rows) => resolve(rows || [])
    );
  });

  const startMonth = startIso.slice(0, 7);
  const endMonth = endIso.slice(0, 7);
  const budgets = await new Promise((resolve) => {
    db.all(
      `SELECT month, SUM(amount) AS total
       FROM budgets
       WHERE user_id = ?
         AND month BETWEEN ? AND ?
       GROUP BY month`,
      [userId, startMonth, endMonth],
      (err, rows) => resolve(rows || [])
    );
  });

  const checkByDate = new Map(checks.map(r => [toDateOnly(r.date), r]));
  const expenseByDate = new Map(expenses.map(r => [toDateOnly(r.d), Number(r.spent) || 0]));
  const budgetByMonth = new Map(budgets.map(r => [r.month, Number(r.total) || 0]));

  const days = [];
  let dt = new Date(startIso);
  const end = new Date(endIso);

  while (dt <= end) {
    const d = dt.toISOString().slice(0, 10);
    const monthKey = d.slice(0, 7);
    const dim = daysInMonthStr(monthKey);
    const monthBudget = budgetByMonth.get(monthKey) || 0;
    const dayAllowance = monthBudget > 0 ? monthBudget / dim : null;

    const ch = checkByDate.get(d) || {};
    const sleepH = typeof ch.sleep_hours === 'number' ? ch.sleep_hours : null;
    const mood = typeof ch.mood === 'number' ? ch.mood : null;       // 1..5
    const energy = typeof ch.energy === 'number' ? ch.energy : null; // 1..5
    const workout = ch.workout_done ? 1 : 0;
    const spent = expenseByDate.get(d) || 0;

    const sleepScore   = sleepH == null ? 0 : clamp01(sleepH / 8); // 8—á = 100%
    const moodScore    = mood == null ? 0 : clamp01(mood / 5);
    const energyScore  = energy == null ? 0 : clamp01(energy / 5);
    const workoutScore = workout ? 1 : 0;

    const healthScore = 0.4*sleepScore + 0.3*moodScore + 0.2*energyScore + 0.1*workoutScore;

    let financeScore = 0.7; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –±—é–¥–∂–µ—Ç–æ–≤ –Ω–µ—Ç
    if (dayAllowance != null) {
      financeScore = spent <= dayAllowance ? 1 : clamp01(1 - ((spent - dayAllowance)/dayAllowance));
    }

    const engaged = (sleepH!=null || mood!=null || energy!=null || workout) ? 1 : 0;

    const total = 0.5*healthScore + 0.3*financeScore + 0.2*engaged;

    days.push({
      date: d,
      components: {
        health: healthScore*100,
        finance: financeScore*100,
        engagement: engaged*100,
      },
      total: total*100,
      facts: { sleepH, mood, energy, workout, spent, dayAllowance }
    });

    dt.setDate(dt.getDate() + 1);
  }

  const avg = days.reduce((s,x)=>s+x.total,0) / (days.length || 1);
  const avgHealth  = days.reduce((s,x)=>s+x.components.health,0) / (days.length || 1);
  const avgFinance = days.reduce((s,x)=>s+x.components.finance,0) / (days.length || 1);
  const avgEngage  = days.reduce((s,x)=>s+x.components.engagement,0) / (days.length || 1);

  return {
    avg: Number(avg.toFixed(1)),
    breakdown: {
      health: Number(avgHealth.toFixed(1)),
      finance: Number(avgFinance.toFixed(1)),
      engagement: Number(avgEngage.toFixed(1)),
    },
    days
  };
}

function buildAdvice(result) {
  const { health, finance, engagement } = result.breakdown;
  const pairs = [
    ['Health', health],
    ['Finance', finance],
    ['Engagement', engagement],
  ].sort((a,b)=>a[1]-b[1]);
  const weakest = pairs[0][0];

  const last7 = result.days;
  const avgSleep = (() => {
    const vals = last7.map(d=>d.facts.sleepH).filter(x=>typeof x==='number');
    return vals.length ? vals.reduce((s,x)=>s+x,0)/vals.length : null;
  })();
  const workouts = last7.filter(d=>d.facts.workout).length;
  const overBudgetDays = last7.filter(d => d.facts.dayAllowance!=null && d.facts.spent > d.facts.dayAllowance).length;
  const engagedDays = last7.filter(d=>d.components.engagement>0).length;

  let advice = '';
  if (weakest === 'Health') {
    if (avgSleep!=null && avgSleep < 7) advice = '–°—Ç–∞—Ä–∞–π—Å—è —Å–ø–∞—Ç—å 7‚Äì8 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ª–µ—á—å –Ω–∞ 30 –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ –≤—Å—é –Ω–µ–¥–µ–ª—é.';
    else if (workouts < 3) advice = '–î–æ–±–∞–≤—å 1‚Äì2 –ª—ë–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–¥–∞–∂–µ 20 –º–∏–Ω—É—Ç –ø—Ä–æ–≥—É–ª–∫–∏).';
    else advice = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä—É—Ç–∏–Ω—É: –ª—ë–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –≤–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω.';
  } else if (weakest === 'Finance') {
    if (overBudgetDays >= 3) advice = '–ß–∞—Å—Ç–æ –ø—Ä–µ–≤—ã—à–∞–µ—à—å –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –í—ã–±–µ—Ä–∏ 1‚Äì2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∂—ë—Å—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Ä–∞—Å–ø–ª–∞—á–∏–≤–∞–π—Å—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π.';
    else advice = '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏ –ª–∏–º–∏—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –±—é–¥–∂–µ—Ç —Å—Ç–æ–∏—Ç —á—É—Ç—å –ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å.';
  } else {
    if (engagedDays < 5) advice = '–ó–∞–ø–æ–ª–Ω—è–π daily check —Ö–æ—Ç—è –±—ã –≤ –±—É–¥–Ω–∏. –í–∫–ª—é—á–∏ —É—Ç—Ä–µ–Ω–Ω–µ–µ/–≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.';
    else advice = '–û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.';
  }

  return { weakest, advice };
}

// ========= –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø –î–õ–Ø DAILY CHECKS (—Ç–∞–±–ª–∏—Ü—É —Å—á–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–π) ========= //
function getPrefs(userId) {
  return new Promise((resolve) => {
    db.get('SELECT morning_enabled, evening_enabled FROM check_prefs WHERE user_id = ?', [userId], (err, row) => {
      if (!row) {
        // –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –≤–∫–ª—é—á–µ–Ω–æ –æ–±–µ
        resolve({ morning_enabled: 1, evening_enabled: 1 });
      } else {
        resolve(row);
      }
    });
  });
}

function setPrefs(userId, key, value) {
  return new Promise((resolve, reject) => {
    db.run(
      `INSERT INTO check_prefs (user_id, ${key}) VALUES (?, ?)
       ON CONFLICT(user_id) DO UPDATE SET ${key} = excluded.${key}`,
      [userId, value ? 1 : 0],
      (err) => err ? reject(err) : resolve()
    );
  });
}

// –∞–ø—Å–µ—Ä—Ç–µ—Ä –¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫–∞ (—Ç–∞–±–ª–∏—Ü—É —Å—á–∏—Ç–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–π)
function upsertDailyCheck(userId, patch) {
  return new Promise((resolve, reject) => {
    const date = patch.date || ymd();
    db.run(
      `INSERT INTO daily_checks (user_id, date, sleep_hours, mood, energy, workout_done, notes)
       VALUES (?, ?, ?, ?, ?, ?, ?)
       ON CONFLICT(user_id, date) DO UPDATE SET
         sleep_hours=COALESCE(excluded.sleep_hours, sleep_hours),
         mood=COALESCE(excluded.mood, mood),
         energy=COALESCE(excluded.energy, energy),
         workout_done=COALESCE(excluded.workout_done, workout_done),
         notes=COALESCE(excluded.notes, notes),
         updated_at=CURRENT_TIMESTAMP`,
      [userId, date, patch.sleep_hours ?? null, patch.mood ?? null, patch.energy ?? null, patch.workout_done ?? null, patch.notes ?? null],
      (err) => err ? reject(err) : resolve()
    );
  });
}

// ========= –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ========= //
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  if (!text) return;

  // 0) –†–µ–∂–∏–º "–î—Ä—É–≥–æ–µ..." –¥–ª—è —Å–Ω–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤
  if (userStates[chatId]?.step === 'sleep_custom') {
    const hours = parseFloat((text || '').replace(',', '.'));
    const dateStr = userStates[chatId].date || ymd();
    delete userStates[chatId];
    if (isNaN(hours) || hours <= 0 || hours > 24) {
      return bot.sendMessage(chatId, '–ù–µ –ø–æ–Ω—è–ª —á–∏—Å–ª–æ —á–∞—Å–æ–≤. –ü—Ä–∏–º–µ—Ä: 7.5');
    }
    return getUserId(chatId, async (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏.');
      await upsertDailyCheck(userId, { date: dateStr, sleep_hours: hours });
      return bot.sendMessage(chatId, `–°–æ–Ω ${hours}—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ`);
    });
  }

  // 1) –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (userStates[chatId]?.step && userStates[chatId]?.step !== 'sleep_custom') {
    return handleTrainingSteps(chatId, text);
  }

  // 2) –§–∏–Ω–∞–Ω—Å—ã: +/-
  if (/^[+-]\d+/.test(text)) {
    const match = text.match(/^([+-])(\d+)\s+(.+)/);
    if (match) {
      const [, sign, amountStr, category] = match;
      const type = sign === '+' ? 'income' : 'expense';
      const amount = parseFloat(amountStr);

      return getUserId(chatId, (userId) => {
        if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');

        db.run(
          'INSERT INTO finances (user_id, type, category, amount) VALUES (?, ?, ?, ?)',
          [userId, type, category, amount],
          (err) => {
            if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.');
            bot.sendMessage(chatId, `‚úÖ ${type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'} ${amount}‚ÇΩ (${category}) –¥–æ–±–∞–≤–ª–µ–Ω.`);
          }
        );
      });
    }
  }

  // 3) /todo
  if (text.startsWith('/todo ')) {
    const task = text.slice(6).trim();
    if (!task) return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.');
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.run('INSERT INTO todos (text, user_id) VALUES (?, ?)', [task, userId], (err) => {
        if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
        bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${task}`);
      });
    });
  }

  // 4) /tasks
  if (text === '/tasks') {
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.all('SELECT text FROM todos WHERE user_id = ? AND completed = 0 ORDER BY due_date IS NULL, due_date ASC', [userId], (err, rows) => {
        if (err || !rows.length) return bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
        const list = rows.map((r, i) => `${i + 1}. ${r.text}`).join('\n');
        bot.sendMessage(chatId, `üìã –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n${list}`);
      });
    });
  }

  // 5) /goals
  if (text === '/goals') {
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.all('SELECT title, current, target, is_binary FROM goals WHERE user_id = ?', [userId], (err, rows) => {
        if (err || !rows.length) return bot.sendMessage(chatId, '–ù–µ—Ç —Ü–µ–ª–µ–π.');
        const list = rows.map(g => {
          const progress = g.is_binary ? (g.current ? 100 : 0) : Math.round((g.current / g.target) * 100);
          return `üéØ ${g.title} ‚Äî ${progress}%`;
        }).join('\n');
        bot.sendMessage(chatId, `üéØ –¶–µ–ª–∏:\n${list}`);
      });
    });
  }

  // 6) /start /help
  if (text === '/help') return bot.sendMessage(chatId, helpMessage);

  if (text === '/start') {
    bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ K-Board Bot!
  
–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –∫ —Å–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

/connect abc123`);
    return;
  }

  // 7) /train
  if (text === '/train') {
    userStates[chatId] = { step: 'type', data: {} };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', callback_data: 'type:training' },
          { text: 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á', callback_data: 'type:doctor' },
          { text: 'üß™ –ê–Ω–∞–ª–∏–∑—ã', callback_data: 'type:analysis' },
          { text: 'üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞', callback_data: 'type:medication' }
        ]]
      }
    });
  }

  // –§–æ–ª–ª–±–µ–∫
  if (text.startsWith('/')) return; // —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å ¬´–ù–µ –ø–æ–Ω—è–ª¬ª –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
  return bot.sendMessage(chatId, 'ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
});

// ========= –ö–û–ú–ê–ù–î–´ –í–ù–ï message-–ª–∏—Å–Ω–µ—Ä–∞ ========= //

// /checkon [morning|evening|all]
bot.onText(/^\/checkon(?:\s+(morning|evening|all))?$/, (msg, match) => {
  const chatId = msg.chat.id;
  const scope = match[1] || 'all';
  getUserId(chatId, async (userId) => {
    if (!userId) return bot.sendMessage(chatId, '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');
    if (scope === 'morning' || scope === 'all') await setPrefs(userId, 'morning_enabled', 1);
    if (scope === 'evening' || scope === 'all') await setPrefs(userId, 'evening_enabled', 1);
    bot.sendMessage(chatId, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã (' + scope + ').');
  });
});

// /checkoff [morning|evening|all]
bot.onText(/^\/checkoff(?:\s+(morning|evening|all))?$/, (msg, match) => {
  const chatId = msg.chat.id;
  const scope = match[1] || 'all';
  getUserId(chatId, async (userId) => {
    if (!userId) return bot.sendMessage(chatId, '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');
    if (scope === 'morning' || scope === 'all') await setPrefs(userId, 'morning_enabled', 0);
    if (scope === 'evening' || scope === 'all') await setPrefs(userId, 'evening_enabled', 0);
    bot.sendMessage(chatId, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã (' + scope + ').');
  });
});

// /budget [YYYY-MM]
bot.onText(/^\/budget(?:\s+(\d{4})-(\d{2}))?$/, (msg, match) => {
  const chatId = msg.chat.id;
  const inputYear = match[1];
  const inputMonth = match[2];
  const month = (() => {
    if (inputYear && inputMonth) return `${inputYear}-${inputMonth}`;
    const d = new Date();
    const m = String(d.getMonth() + 1).padStart(2, '0');
    return `${d.getFullYear()}-${m}`;
  })();

  getUserId(chatId, (userId) => {
    if (!userId) return bot.sendMessage(chatId, '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω.');

    const sql = `
      SELECT b.category, b.amount AS budget,
             IFNULL(SUM(f.amount), 0) AS spent
      FROM budgets b
      LEFT JOIN finances f
        ON f.user_id = b.user_id
       AND f.type = 'expense'
       AND strftime('%Y-%m', f.date) = b.month
       AND LOWER(TRIM(f.category)) = LOWER(TRIM(b.category))
      WHERE b.user_id = ? AND b.month = ?
      GROUP BY b.category, b.amount
      ORDER BY b.category
    `;

    db.all(sql, [userId, month], (err, rows) => {
      if (err) {
        console.error('budget cmd error:', err);
        return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–æ–≤.');
      }
      if (!rows || rows.length === 0) {
        return bot.sendMessage(chatId, `üßæ –ë—é–¥–∂–µ—Ç—ã –Ω–∞ ${month} –Ω–µ –∑–∞–¥–∞–Ω—ã.`);
      }

      const d = new Date();
      const [yy, mm] = month.split('-').map(Number);
      const daysInMonth = new Date(yy, mm, 0).getDate();
      const currentDay = (yy === d.getFullYear() && mm === (d.getMonth() + 1)) ? d.getDate() : daysInMonth;

      let totalBudget = 0, totalSpent = 0, totalForecast = 0;
      const lines = rows.map(r => {
        const pct = r.budget ? Math.round((r.spent / r.budget) * 100) : 0;
        const remaining = Math.round((r.budget || 0) - (r.spent || 0));
        const dailyRate = currentDay ? (r.spent / currentDay) : 0;
        const forecast = Math.round(dailyRate * daysInMonth);
        totalBudget += Number(r.budget || 0);
        totalSpent += Number(r.spent || 0);
        totalForecast += forecast;
        const warn = forecast > r.budget ? ' ‚ö†Ô∏è' : '';
        return `‚Ä¢ ${r.category}: ${pct}% | –æ—Å—Ç–∞—Ç–æ–∫ *${remaining}* ‚ÇΩ | –ø—Ä–æ–≥–Ω–æ–∑ *${forecast}* ‚ÇΩ${warn}`;
      }).join('\n');

      const header =
        `üßæ *–ë—é–¥–∂–µ—Ç—ã (${month})*\n` +
        `–í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç: *${Math.round(totalBudget)}* ‚ÇΩ\n` +
        `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *${Math.round(totalSpent)}* ‚ÇΩ\n` +
        `–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–µ—Å—è—Ü—É: *${Math.round(totalForecast)}* ‚ÇΩ\n\n`;

      bot.sendMessage(chatId, header + lines, { parse_mode: 'Markdown' });
    });
  });
});

// ========= INLINE-–ö–ù–û–ü–ö–ò ========= //
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data || '';
  const parts = data.split(':');
  const key = parts[0];

  // —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (/train)
  if (key === 'type') {
    const value = parts[1]; // training|doctor|analysis|medication
    userStates[chatId] = { step: 'date', data: { type: value } };
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 17.08 –∏–ª–∏ 17 –∞–≤–≥—É—Å—Ç–∞:');
  }

  // daily_checks
  if (key === 'sleep') {
    // sleep:YYYY-MM-DD:7
    const dateStr = parts[1];
    const val = parts[2];
    return getUserId(chatId, async (userId) => {
      if (!userId) return bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏.', show_alert: true });
      await upsertDailyCheck(userId, { date: dateStr, sleep_hours: Number(val) });
      return bot.answerCallbackQuery(query.id, { text: `–°–æ–Ω: ${val}—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω` });
    });
  }

  if (key === 'sleepother') {
    // sleepother:YYYY-MM-DD
    const dateStr = parts[1];
    userStates[chatId] = { step: 'sleep_custom', date: dateStr };
    return bot.sendMessage(chatId, '–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–ø–∞–ª? –ù–∞–ø—Ä–∏–º–µ—Ä: 7.5');
  }

  if (key === 'mood') {
    const dateStr = parts[1]; const val = parts[2];
    return getUserId(chatId, async (userId) => {
      if (!userId) return;
      await upsertDailyCheck(userId, { date: dateStr, mood: Number(val) });
      return bot.answerCallbackQuery(query.id, { text: `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${val}` });
    });
  }

  if (key === 'energy') {
    const dateStr = parts[1]; const val = parts[2];
    return getUserId(chatId, async (userId) => {
      if (!userId) return;
      await upsertDailyCheck(userId, { date: dateStr, energy: Number(val) });
      return bot.answerCallbackQuery(query.id, { text: `–≠–Ω–µ—Ä–≥–∏—è: ${val}` });
    });
  }

  if (key === 'workout') {
    const dateStr = parts[1]; const val = parts[2];
    return getUserId(chatId, async (userId) => {
      if (!userId) return;
      await upsertDailyCheck(userId, { date: dateStr, workout_done: Number(val) });
      return bot.answerCallbackQuery(query.id, { text: Number(val) ? '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –¥–∞' : '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –Ω–µ—Ç' });
    });
  }

  if (key === 'checksave') {
    const dateStr = parts[1];
    return getUserId(chatId, async (userId) => {
      if (!userId) return;
      await upsertDailyCheck(userId, { date: dateStr }); // –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º updated_at
      return bot.answerCallbackQuery(query.id, { text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ' });
    });
  }

  if (key === 'checkoptout') {
    const scope = parts[1]; // morning|evening
    return getUserId(chatId, async (userId) => {
      if (!userId) return;
      await setPrefs(userId, scope + '_enabled', 0);
      await bot.answerCallbackQuery(query.id, { text: '–û–∫, –±–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—é.' });
      return bot.sendMessage(chatId, `üîï –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ ${scope === 'morning' ? '—É—Ç—Ä–µ–Ω–Ω–∏–µ' : '–≤–µ—á–µ—Ä–Ω–∏–µ'} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. /checkon –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è.`);
    });
  }

  if (key === 'med') {
    const action = parts[1];       // take | skip
    const medicationId = parts[2]; // id –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    const dateStr = parts[3];      // YYYY-MM-DD
    const time = parts[4];         // HH:MM
    const chatId = query.message.chat.id;
  
    return getUserId(chatId, async (userId) => {
      if (!userId) return bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏.', show_alert: true });
  
      // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ medication_intakes
      await new Promise((resolve, reject) => {
        db.run(
          `INSERT INTO medication_intakes (medication_id, user_id, intake_date, intake_time, status)
           VALUES (?, ?, ?, ?, ?)`,
          [medicationId, userId, dateStr, time, action === 'take' ? 'taken' : 'skipped'],
          (err) => err ? reject(err) : resolve()
        );
      });
  
      // –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      let statusText = action === 'take' ? '‚úÖ –í—ã–ø–∏–ª' : '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏–ª';
      await bot.editMessageText(`${query.message.text}\n\n${statusText}`, {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown'
      });
  
      return bot.answerCallbackQuery(query.id, { text: '–ó–∞–ø–∏—Å–∞–ª üëç' });
    });
  }
});

// ========= –ü–û–®–ê–ì–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï (—Ç–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏) ========= //
function handleTrainingSteps(chatId, text) {
  const state = userStates[chatId];
  const { step, data } = state;

  if (step === 'date') {
    const parsed = parseDate(text);
    if (!parsed) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "17.08" –∏–ª–∏ "17 –∞–≤–≥—É—Å—Ç–∞"');
    }
    data.date = parsed;
    state.step = 'time';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):');
  } else if (step === 'time') {
    data.time = text;
    state.step = 'place';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:');
  } else if (step === 'place') {
    data.place = text;
    state.step = 'activity';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
  } else if (step === 'activity') {
    data.activity = text;
    state.step = 'notes';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ—Ç):');
  } else if (step === 'notes') {
    data.notes = text === '-' ? '' : text;
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.run(
        'INSERT INTO health (type, date, time, place, activity, notes, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)',
        [data.type, data.date, data.time, data.place, data.activity, data.notes, userId],
        (err) => {
          if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.');
          bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${data.type} (${data.activity})`);
          delete userStates[chatId];
        }
      );
    });
  }
}

// ========= –£–¢–†–û/–í–ï–ß–ï–† DAILY CHECKS (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ========= //
function sendMorningSleepPrompt(chat_id, dateStr = ymd()) {
  const kb = {
    inline_keyboard: [
      [
        { text: '5—á', callback_data: `sleep:${dateStr}:5` },
        { text: '6—á', callback_data: `sleep:${dateStr}:6` },
        { text: '7—á', callback_data: `sleep:${dateStr}:7` },
        { text: '8—á', callback_data: `sleep:${dateStr}:8` },
        { text: '9—á', callback_data: `sleep:${dateStr}:9` },
      ],
      [{ text: '–î—Ä—É–≥–æ–µ‚Ä¶', callback_data: `sleepother:${dateStr}` }],
      [{ text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É—Ç—Ä–∞', callback_data: `checkoptout:morning` }]
    ]
  };
  return bot.sendMessage(chat_id, 'üò¥ –°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é?', { reply_markup: kb });
}

function sendEveningCheckin(chat_id, dateStr = ymd()) {
  const kb = {
    inline_keyboard: [
      [
        { text: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 1', callback_data: `mood:${dateStr}:1` },
        { text: '2', callback_data: `mood:${dateStr}:2` },
        { text: '3', callback_data: `mood:${dateStr}:3` },
        { text: '4', callback_data: `mood:${dateStr}:4` },
        { text: '5', callback_data: `mood:${dateStr}:5` }
      ],
      [
        { text: '–≠–Ω–µ—Ä–≥–∏—è 1', callback_data: `energy:${dateStr}:1` },
        { text: '2', callback_data: `energy:${dateStr}:2` },
        { text: '3', callback_data: `energy:${dateStr}:3` },
        { text: '4', callback_data: `energy:${dateStr}:4` },
        { text: '5', callback_data: `energy:${dateStr}:5` }
      ],
      [
        { text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –î–∞', callback_data: `workout:${dateStr}:1` },
        { text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ù–µ—Ç', callback_data: `workout:${dateStr}:0` }
      ],
      [
        { text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: `checksave:${dateStr}` },
        { text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤–µ—á–µ—Ä–∞', callback_data: `checkoptout:evening` }
      ]
    ]
  };
  return bot.sendMessage(chat_id, 'üß≠ –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω:', { reply_markup: kb });
}

// ========= CRON: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —Ä–∞–∑–æ–≤–æ, –ú–°–ö) ========= //
cron.schedule('* * * * *', () => {
  const now = new Date();
  const hhmm = now.toTimeString().slice(0, 5);    // "HH:MM"
  const today = now.toISOString().slice(0, 10);   // "YYYY-MM-DD"

  // –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  db.all(
    `SELECT m.*, tu.chat_id
       FROM medications m
       JOIN telegram_users tu ON tu.user_id = m.user_id
      WHERE m.active = 1
        AND m.start_date <= ?
        AND (m.end_date IS NULL OR m.end_date >= ?)`,
    [today, today],
    (err, rows) => {
      if (err || !rows?.length) return;

      for (const m of rows) {
        let times = [];
        try { times = JSON.parse(m.times || '[]'); } catch {}

        // –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö
        if (times.includes(hhmm)) {
          // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
          db.get(
            `SELECT 1 FROM medication_notifications
              WHERE medication_id = ? AND notify_date = ? AND notify_time = ?`,
            [m.id, today, hhmm],
            (e, r) => {
              if (e) return;           // –≤ –ª–æ–≥–∞—Ö —É–≤–∏–¥–∏–º, –µ—Å–ª–∏ —á—Ç–æ
              if (r) return;           // —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º

              const text = `üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã–ø–µ–π *${m.name}*${m.dosage ? `, ${m.dosage}` : ''} (${hhmm})`;
              bot.sendMessage(m.chat_id, text, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [[
                    { text: '‚úÖ –í—ã–ø–∏–ª', callback_data: `med:take:${m.id}:${today}:${hhmm}` },
                    { text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏–ª', callback_data: `med:skip:${m.id}:${today}:${hhmm}` }
                  ]]
                }
              });

              // —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
              db.run(
                `INSERT OR IGNORE INTO medication_notifications (medication_id, notify_date, notify_time, sent)
                 VALUES (?, ?, ?, 1)`,
                [m.id, today, hhmm]
              );
            }
          );
        }
      }
    }
  );
}, { timezone: 'Europe/Moscow' });

// ========= CRON: –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–º–µ—Ç–æ–∫ –ø–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º (–≤—Å 03:00 –ú–°–ö, —Ö—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π) ========= //
cron.schedule('0 3 * * 0', () => {
  const cutoff = new Date();
  cutoff.setDate(cutoff.getDate() - 30);
  const cutoffDate = cutoff.toISOString().slice(0, 10); // YYYY-MM-DD

  db.run(
    `DELETE FROM medication_notifications WHERE notify_date < ?`,
    [cutoffDate],
    (err) => {
      if (err) console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ medication_notifications:', err);
      else console.log('üßπ –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –æ—Ç–º–µ—Ç–∫–∏ medication_notifications –¥–æ', cutoffDate);
    }
  );
}, { timezone: 'Europe/Moscow' });

// ========= CRON: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ 75% –±—é–¥–∂–µ—Ç–∞ (08:00 –ú–°–ö) ========= //
cron.schedule('0 8 * * *', async () => {
  const month = currentMonth();
  const sql = `
    SELECT b.user_id, b.category, b.amount AS budget,
           IFNULL(SUM(f.amount), 0) AS spent
    FROM budgets b
    LEFT JOIN finances f
      ON f.user_id = b.user_id
     AND f.type = 'expense'
     AND strftime('%Y-%m', f.date) = b.month
     AND LOWER(TRIM(f.category)) = LOWER(TRIM(b.category))
    WHERE b.month = ?
    GROUP BY b.user_id, b.category, b.amount
    HAVING spent >= 0.75 * budget AND spent < budget
  `;

  db.all(sql, [month], async (err, rows) => {
    if (err) {
      console.error('Budget 75% cron error:', err);
      return;
    }
    for (const r of rows) {
      try {
        const chatId = await getChatIdByUserId(r.user_id);
        if (!chatId) continue;
        const pct = Math.round((r.spent / r.budget) * 100);
        const remaining = Math.max(0, r.budget - r.spent);
        const msg =
          `‚ö†Ô∏è *–ë—é–¥–∂–µ—Ç –ø–æ—á—Ç–∏ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω*\n` +
          `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *${r.category}*\n` +
          `–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *${Math.round(r.spent)}* –∏–∑ *${Math.round(r.budget)}* ‚ÇΩ (${pct}%)\n` +
          `–û—Å—Ç–∞—Ç–æ–∫: *${Math.round(remaining)}* ‚ÇΩ`;
        await bot.sendMessage(chatId, msg, { parse_mode: 'Markdown' });
      } catch (e) {
        console.error('Send warn error:', e);
      }
    }
  });
}, { timezone: 'Europe/Moscow' });

// ========= CRON: –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 08:00 –ú–°–ö) ========= //
cron.schedule('0 8 * * 1', async () => {
  const month = currentMonth();
  db.all('SELECT user_id, chat_id FROM telegram_users', [], async (err, bindings) => {
    if (err) { console.error('Digest users error:', err); return; }
    for (const { user_id, chat_id } of bindings) {
      try {
        const top3 = await new Promise((resolve, reject) => {
          db.all(
            `SELECT category, SUM(amount) AS total
             FROM finances
             WHERE user_id = ?
               AND type = 'expense'
               AND date >= datetime('now', '-7 day')
             GROUP BY category
             ORDER BY total DESC
             LIMIT 3`,
            [user_id],
            (e, rows) => e ? reject(e) : resolve(rows || [])
          );
        });

        const stats = await new Promise((resolve, reject) => {
          db.all(
            `SELECT b.category, b.amount AS budget,
                    IFNULL(SUM(f.amount), 0) AS spent
             FROM budgets b
             LEFT JOIN finances f
               ON f.user_id = b.user_id
              AND f.type = 'expense'
              AND strftime('%Y-%m', f.date) = b.month
              AND LOWER(TRIM(f.category)) = LOWER(TRIM(b.category))
             WHERE b.user_id = ? AND b.month = ?
             GROUP BY b.category, b.amount
             ORDER BY b.category`,
            [user_id, month],
            (e, rows) => e ? reject(e) : resolve(rows || [])
          );
        });

        const topLines = top3.length
          ? top3.map((r, i) => `${i + 1}. ${r.category} ‚Äî *${Math.round(r.total)}* ‚ÇΩ`).join('\n')
          : '–Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é';

        const budgetLines = stats.length
          ? stats.map(s => {
              const pct = s.budget ? Math.round((s.spent / s.budget) * 100) : 0;
              const remain = Math.round((s.budget || 0) - (s.spent || 0));
              return `‚Ä¢ ${s.category}: ${pct}% | –æ—Å—Ç–∞—Ç–æ–∫ *${remain}* ‚ÇΩ`;
            }).join('\n')
          : '–±—é–¥–∂–µ—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã';

        const text =
          `üßæ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∞–π–¥–∂–µ—Å—Ç*\n` +
          `–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n\n` +
          `*–¢–æ–ø-3 —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n${topLines}\n\n` +
          `*–ë—é–¥–∂–µ—Ç—ã (${month}):*\n${budgetLines}`;

        await bot.sendMessage(chat_id, text, { parse_mode: 'Markdown' });
      } catch (e) {
        console.error('Digest send error:', e);
      }
    }
  });
}, { timezone: 'Europe/Moscow' });

// ========= CRON: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –°–ö–û–†–ò–ù–ì–£ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 11:00 –ú–°–ö) ========= //
cron.schedule('0 11 * * 1', () => {
  const { startIso, endIso, label } = prevWeekRange();

  db.all('SELECT user_id, chat_id FROM telegram_users', [], async (err, rows) => {
    if (err || !rows?.length) return;

    for (const { user_id, chat_id } of rows) {
      try {
        const result = await computeScoreForPeriod(user_id, startIso, endIso);
        const { avg, breakdown } = result;
        const { weakest, advice } = buildAdvice(result);

        const msg =
          `üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Å–∫–æ—Ä–∏–Ω–≥—É*\n` +
          `–ü–µ—Ä–∏–æ–¥: *${label}*\n\n` +
          `*–°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä–∏–Ω–≥:* ${Math.round(avg)}%\n` +
          `‚Ä¢ Health: ${Math.round(breakdown.health)}%\n` +
          `‚Ä¢ Finance: ${Math.round(breakdown.finance)}%\n` +
          `‚Ä¢ Engagement: ${Math.round(breakdown.engagement)}%\n\n` +
          `üìâ *–°–ª–∞–±–æ–µ –º–µ—Å—Ç–æ:* ${weakest}\n` +
          `üí° *–°–æ–≤–µ—Ç:* ${advice}`;

        await bot.sendMessage(chat_id, msg, { parse_mode: 'Markdown' });
      } catch (e) {
        console.error('weekly score digest error:', e);
      }
    }
  });
}, { timezone: 'Europe/Moscow' });

// ========= –ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –î–õ–Ø –í–°–ï–• (—Ç–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ========= //
const motivationalQuotes = [
  "üöÄ –í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª—è–º!",
  "üî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
  "üèÜ –û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –º–µ—á—Ç–µ!",
  "üéØ –¶–µ–ª—å –±–ª–∏–∑–∫–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π!",
  "üí™ –¢—ã —É–∂–µ –¥–∞–ª–µ–∫–æ –∑–∞—à—ë–ª ‚Äî –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
];

// –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ (05:00 UTC)
cron.schedule('0 5 * * *', () => {
  db.all('SELECT chat_id, user_id FROM telegram_users', async (err, users) => {
    if (err || !users.length) return;

    for (const { chat_id, user_id } of users) {
      try {
        const chat = await bot.getChat(chat_id);
        const firstName = chat.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const today = new Date().toISOString().split('T')[0];

        // 1. HEALTH
        const healthList = await new Promise(resolve => {
          db.all(
            'SELECT type, time, activity FROM health WHERE user_id = ? AND date = ? AND completed = 0 ORDER BY time',
            [user_id, today],
            (err, rows) => {
              if (err || !rows.length) return resolve('');
              const formatted = rows.map(h => {
                const types = {
                  training: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
                  doctor: '–í—Ä–∞—á',
                  analysis: '–ê–Ω–∞–ª–∏–∑—ã',
                  medication: '–õ–µ–∫–∞—Ä—Å—Ç–≤–∞'
                };
                const emoji = {
                  training: 'üí™',
                  doctor: 'üë®‚Äç‚öïÔ∏è',
                  analysis: 'üß™',
                  medication: 'üíä'
                };
                return `${emoji[h.type] || 'üè•'} ${types[h.type] || ''} ‚Äî ${h.time} ‚Äî ${h.activity}`;
              }).join('\n');
              resolve(formatted);
            }
          );
        });

        // 2. TASKS
        const taskList = await new Promise(resolve => {
          db.all(
            'SELECT text FROM todos WHERE user_id = ? AND completed = 0 ORDER BY due_date IS NULL, due_date ASC',
            [user_id],
            (err, rows) => {
              if (err || !rows.length) return resolve('');
              resolve(rows.map(r => `‚Ä¢ ${r.text}`).join('\n'));
            }
          );
        });

        // 3. GOALS
        const goalsList = await new Promise(resolve => {
          db.all(
            'SELECT title, current, target, unit, is_binary FROM goals WHERE user_id = ?',
            [user_id],
            (err, rows) => {
              if (err || !rows.length) return resolve('');
              resolve(rows.map(g => {
                const percent = g.is_binary ? (g.current ? 100 : 0) : Math.round((g.current / g.target) * 100);
                return `‚Ä¢ ${g.title} ‚Äî ${percent}%`;
              }).join('\n'));
            }
          );
        });

        // 4. Final message
        const quote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];
        const message =
          `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${firstName} üëã\n\n` +
          `–°–µ–≥–æ–¥–Ω—è –ø–æ –ø–ª–∞–Ω–∞–º:\n\n` +
          (healthList ? `üí™ –ó–¥–æ—Ä–æ–≤—å–µ\n${healthList}\n\n` : '') +
          (taskList ? `‚òëÔ∏è –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n${taskList}\n\n` : '') +
          (goalsList ? `üéØ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏\n${goalsList}\n\n` : '') +
          `üî• ${quote}\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, ${firstName}!`;

        await bot.sendMessage(chat_id, message);
        console.log(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${chat_id}`);
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è chat_id ${chat_id}:`, err);
      }
    }
  });
});

// ========= CRON: DAILY CHECKS —Ä–∞—Å—Å—ã–ª–∫–∏ ========= //
// –£—Ç—Ä–æ ‚Äî 08:30 –ú–°–ö
cron.schedule('30 8 * * *', () => {
  db.all('SELECT tu.user_id, tu.chat_id FROM telegram_users tu', [], async (err, rows) => {
    if (err) return;
    for (const r of rows) {
      const prefs = await getPrefs(r.user_id);
      if (prefs.morning_enabled) {
        sendMorningSleepPrompt(r.chat_id, ymd());
      }
    }
  });
}, { timezone: 'Europe/Moscow' });

// –í–µ—á–µ—Ä ‚Äî 21:30 –ú–°–ö
cron.schedule('30 21 * * *', () => {
  db.all('SELECT tu.user_id, tu.chat_id FROM telegram_users tu', [], async (err, rows) => {
    if (err) return;
    for (const r of rows) {
      const prefs = await getPrefs(r.user_id);
      if (prefs.evening_enabled) {
        sendEveningCheckin(r.chat_id, ymd());
      }
    }
  });
}, { timezone: 'Europe/Moscow' });