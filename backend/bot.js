require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const db = require('./db/db');
const dayjs = require('dayjs');
const cron = require('node-cron');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω');

const userStates = {};

const helpMessage = `üõ† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
+10000 –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
-500 –∫–æ—Ñ–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/todo <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/tasks ‚Äî –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/goals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏
/train ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)`;

// ========= –£–¢–ò–õ–ò–¢–ê ========= //
function getUserId(chatId, callback) {
  db.get('SELECT user_id FROM telegram_users WHERE chat_id = ?', [chatId], (err, row) => {
    if (err || !row) return callback(null);
    callback(row.user_id);
  });
}

// ========= –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ========= //
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  if (!text) return;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (userStates[chatId]?.step) return handleTrainingSteps(chatId, text);

  if (/^[+-]\d+/.test(text)) {
    const match = text.match(/^([+-])(\d+)\s+(.+)/);
    if (match) {
      const [, sign, amountStr, category] = match;
      const type = sign === '+' ? 'income' : 'expense';
      const amount = parseFloat(amountStr);

      return getUserId(chatId, (userId) => {
        if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');

        db.run(
          'INSERT INTO finances (user_id, type, category, amount) VALUES (?, ?, ?, ?)',
          [userId, type, category, amount],
          (err) => {
            if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.');
            bot.sendMessage(chatId, `‚úÖ ${type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'} ${amount}‚ÇΩ (${category}) –¥–æ–±–∞–≤–ª–µ–Ω.`);
          }
        );
      });
    }
  }

  if (text.startsWith('/todo ')) {
    const task = text.slice(6).trim();
    if (!task) return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.');

    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.run('INSERT INTO todos (text, user_id) VALUES (?, ?)', [task, userId], (err) => {
        if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
        bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${task}`);
      });
    });
  }

  if (text === '/tasks') {
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.all('SELECT text FROM todos WHERE user_id = ? AND completed = 0 ORDER BY due_date IS NULL, due_date ASC', [userId], (err, rows) => {
        if (err || !rows.length) return bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
        const list = rows.map((r, i) => `${i + 1}. ${r.text}`).join('\n');
        bot.sendMessage(chatId, `üìã –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n${list}`);
      });
    });
  }

  if (text === '/goals') {
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.all('SELECT title, current, target, is_binary FROM goals WHERE user_id = ?', [userId], (err, rows) => {
        if (err || !rows.length) return bot.sendMessage(chatId, '–ù–µ—Ç —Ü–µ–ª–µ–π.');
        const list = rows.map(g => {
          const progress = g.is_binary ? (g.current ? 100 : 0) : Math.round((g.current / g.target) * 100);
          return `üéØ ${g.title} ‚Äî ${progress}%`;
        }).join('\n');
        bot.sendMessage(chatId, `üéØ –¶–µ–ª–∏:\n${list}`);
      });
    });
  }

  if (text === '/train') {
    userStates[chatId] = { step: 'type', data: {} };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', callback_data: 'type:training' },
          { text: 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á', callback_data: 'type:doctor' },
          { text: 'üß™ –ê–Ω–∞–ª–∏–∑—ã', callback_data: 'type:analysis' },
          { text: 'üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞', callback_data: 'type:medication' }
        ]]
      }
    });
  }

  if (text === '/help') return bot.sendMessage(chatId, helpMessage);

  return bot.sendMessage(chatId, 'ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
});

// ========= INLINE-–ö–ù–û–ü–ö–ò ========= //
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const [key, value] = query.data.split(':');

  if (key === 'type') {
    userStates[chatId] = {
      step: 'date',
      data: { type: value }
    };
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:');
  }
});

// ========= –ü–û–®–ê–ì–û–í–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï ========= //
function handleTrainingSteps(chatId, text) {
  const state = userStates[chatId];
  const { step, data } = state;

  if (step === 'date') {
    data.date = text;
    state.step = 'time';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):');
  } else if (step === 'time') {
    data.time = text;
    state.step = 'place';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:');
  } else if (step === 'place') {
    data.place = text;
    state.step = 'activity';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
  } else if (step === 'activity') {
    data.activity = text;
    state.step = 'notes';
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ—Ç):');
  } else if (step === 'notes') {
    data.notes = text === '-' ? '' : text;
    return getUserId(chatId, (userId) => {
      if (!userId) return bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å–∏—Å—Ç–µ–º–µ.');
      db.run(
        'INSERT INTO health (type, date, time, place, activity, notes, user_id) VALUES (?, ?, ?, ?, ?, ?, ?)',
        [data.type, data.date, data.time, data.place, data.activity, data.notes, userId],
        (err) => {
          if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.');
          bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${data.type} (${data.activity})`);
          delete userStates[chatId];
        }
      );
    });
  }
}

// ========= –ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ========= //
const motivationalQuotes = [
  "üöÄ –í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª—è–º!",
  "üî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
  "üèÜ –û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –º–µ—á—Ç–µ!",
  "üéØ –¶–µ–ª—å –±–ª–∏–∑–∫–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π!",
  "üí™ –¢—ã —É–∂–µ –¥–∞–ª–µ–∫–æ –∑–∞—à—ë–ª ‚Äî –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
];

cron.schedule('0 5 * * *', async () => {
  const chatId = process.env.CHAT_ID;
  if (!chatId) return console.error('‚ùå CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');

  const userId = await new Promise(resolve => {
    db.get('SELECT user_id FROM telegram_users WHERE chat_id = ?', [chatId], (err, row) => {
      resolve(row?.user_id || null);
    });
  });
  if (!userId) return;

  let firstName = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  try {
    const chat = await bot.getChat(chatId);
    firstName = chat.first_name || firstName;
  } catch {}

  const today = dayjs().format('YYYY-MM-DD');

  const healthList = await new Promise(resolve => {
    db.all('SELECT type, time, activity FROM health WHERE user_id = ? AND date = ? AND completed = 0 ORDER BY time', [userId, today], (err, rows) => {
      if (err || !rows.length) return resolve('');
      const formatted = rows.map(h => {
        let emoji = 'üè•';
        if (h.type === 'training') emoji = 'üí™';
        else if (h.type === 'doctor') emoji = 'üë®‚Äç‚öïÔ∏è';
        else if (h.type === 'analysis') emoji = 'üß™';
        else if (h.type === 'medication') emoji = 'üíä';
        return `${emoji} ${h.time} ‚Äî ${h.activity}`;
      }).join('\n');
      resolve(formatted);
    });
  });

  const taskList = await new Promise(resolve => {
    db.all('SELECT text FROM todos WHERE user_id = ? AND completed = 0 ORDER BY due_date IS NULL, due_date ASC', [userId], (err, rows) => {
      if (err || !rows.length) return resolve('');
      resolve(rows.map(r => `‚Ä¢ ${r.text}`).join('\n'));
    });
  });

  const goalsList = await new Promise(resolve => {
    db.all('SELECT title, current, target, unit, is_binary FROM goals WHERE user_id = ?', [userId], (err, rows) => {
      if (err || !rows.length) return resolve('');
      resolve(rows.map(g => {
        const percent = g.is_binary ? (g.current ? 100 : 0) : Math.round((g.current / g.target) * 100);
        return `‚Ä¢ ${g.title} ‚Äî ${percent}%`;
      }).join('\n'));
    });
  });

  const quote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];

  const message =
    `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${firstName} üëã\n\n` +
    `–°–µ–≥–æ–¥–Ω—è –ø–æ –ø–ª–∞–Ω–∞–º:\n\n` +
    (healthList ? `üí™ –ó–¥–æ—Ä–æ–≤—å–µ\n${healthList}\n\n` : '') +
    (taskList ? `‚òëÔ∏è –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n${taskList}\n\n` : '') +
    (goalsList ? `üéØ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏\n${goalsList}\n\n` : '') +
    `üî• ${quote}\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, ${firstName}!`;

  bot.sendMessage(chatId, message).then(() => {
    console.log('‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  }).catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
});