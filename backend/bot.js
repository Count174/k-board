require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const db = require('./db/db');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });
console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω');

const userStates = {}; // –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–≤–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

// ========= HELP ========= //
const helpMessage = `üõ† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
+10000 –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥
-500 –∫–æ—Ñ–µ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
/todo <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/tasks ‚Äî –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
/goals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏
/train ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)`;

// ========= –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ========= //
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  console.log('chatId', msg.chat.id);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (userStates[chatId] && userStates[chatId].step) {
    return handleTrainingSteps(chatId, text);
  }

  if (/^[+-]\d+/.test(text)) {
    const match = text.match(/^([+-])(\d+)\s+(.+)/);
    if (match) {
      const [, sign, amountStr, category] = match;
      const type = sign === '+' ? 'income' : 'expense';
      const amount = parseFloat(amountStr);

      db.run(
        'INSERT INTO finances (type, category, amount) VALUES (?, ?, ?)',
        [type, category, amount],
        (err) => {
          if (err) {
            console.error(err);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.');
          } else {
            bot.sendMessage(chatId, `‚úÖ ${type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'} –Ω–∞ ${amount}‚ÇΩ (${category}) –¥–æ–±–∞–≤–ª–µ–Ω.`);
          }
        }
      );
    }
    return;
  }

  if (text.startsWith('/todo ')) {
    const task = text.slice(6).trim();
    if (!task) return bot.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.');
    db.run('INSERT INTO todos (text) VALUES (?)', [task], (err) => {
      if (err) return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
      bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${task}`);
    });
    return;
  }

  if (text === '/tasks') {
    db.all('SELECT text FROM todos WHERE completed = 0', [], (err, rows) => {
      if (err || !rows.length) return bot.sendMessage(chatId, '‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      const list = rows.map((r, i) => `${i + 1}. ${r.text}`).join('\n');
      bot.sendMessage(chatId, `üìã –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n${list}`);
    });
    return;
  }

  if (text === '/goals') {
    db.all('SELECT title, progress, target FROM goals', [], (err, rows) => {
      if (err || !rows.length) return bot.sendMessage(chatId, '–ù–µ—Ç —Ü–µ–ª–µ–π.');
      const list = rows.map(g => `üéØ ${g.title} ‚Äî ${Math.round((g.progress / g.target) * 100)}%`).join('\n');
      bot.sendMessage(chatId, `üéØ –¶–µ–ª–∏:\n${list}`);
    });
    return;
  }

  if (text === '/train') {
    userStates[chatId] = { step: 'type', data: {} };
    return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', callback_data: 'type:training' },
          { text: 'üë®‚Äç‚öïÔ∏è –í—Ä–∞—á', callback_data: 'type:doctor' },
          { text: 'üß™ –ê–Ω–∞–ª–∏–∑—ã', callback_data: 'type:analysis' },
          { text: 'üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞', callback_data: 'type:medication' }
        ]]
      }
    });
  }

  if (text === '/help') return bot.sendMessage(chatId, helpMessage);

  return bot.sendMessage(chatId, 'ü§ñ –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
});

// ========= INLINE-–ö–ù–û–ü–ö–ò ========= //
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const [key, value] = query.data.split(':');

  if (key === 'type') {
    userStates[chatId] = {
      step: 'date',
      data: { type: value }
    };
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:');
  }
});

// ========= –ü–û–®–ê–ì–û–í–´–ô –í–í–û–î –¢–†–ï–ù–ò–†–û–í–ö–ò ========= //
function handleTrainingSteps(chatId, text) {
  const state = userStates[chatId];
  const { step, data } = state;

  if (step === 'date') {
    data.date = text;
    state.step = 'time';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):');
  } else if (step === 'time') {
    data.time = text;
    state.step = 'place';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ:');
  } else if (step === 'place') {
    data.place = text;
    state.step = 'activity';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ / –æ–ø–∏—Å–∞–Ω–∏–µ:');
  } else if (step === 'activity') {
    data.activity = text;
    state.step = 'notes';
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ—Ç):');
  } else if (step === 'notes') {
    data.notes = text === '-' ? '' : text;
    db.run(
      'INSERT INTO health (type, date, time, place, activity, notes) VALUES (?, ?, ?, ?, ?, ?)',
      [data.type, data.date, data.time, data.place, data.activity, data.notes],
      (err) => {
        if (err) {
          console.error(err);
          bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.');
        } else {
          bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${data.type} (${data.activity})`);
        }
        delete userStates[chatId];
      }
    );
  }
}

const cron = require('node-cron');

// –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑
const motivationalQuotes = [
  "üöÄ –í–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª—è–º!",
  "üî• –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!",
  "üèÜ –û–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ –º–µ—á—Ç–µ!",
  "üéØ –¶–µ–ª—å –±–ª–∏–∑–∫–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π!",
  "üí™ –¢—ã —É–∂–µ –¥–∞–ª–µ–∫–æ –∑–∞—à—ë–ª ‚Äî –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
];

// Cron: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞ –ø–æ –ú–°–ö (05:00 UTC)
cron.schedule('0 5 * * *', () => {
  const chatId = process.env.CHAT_ID; // –∑–∞–¥–∞–π —Å–≤–æ–π chatId –≤ .env
  db.all('SELECT title, progress, target FROM goals', [], (err, rows) => {
    if (err || !rows.length) return;
    const list = rows.map(g => `üéØ ${g.title} ‚Äî ${Math.round((g.progress / g.target) * 100)}%`).join('\n');
    const quote = motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)];
    bot.sendMessage(chatId, `${quote}\n\n${list}`);
  });
});