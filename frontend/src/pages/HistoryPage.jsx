import { useEffect, useMemo, useState } from 'react';
import styles from '../styles/HistoryPage.module.css';
import { get, post, remove } from '../api/api';

function Money({ v }) {
  return <>{new Intl.NumberFormat('ru-RU').format(Math.round(v || 0))} ‚ÇΩ</>;
}

/** –õ–∏–Ω–µ–π–Ω—ã–π —á–∞—Ä—Ç –Ω–∞ SVG —Å —Ç—É–ª—Ç–∏–ø–∞–º–∏ */
function LineChart({
  data,
  xKey,
  yKey,
  minY,
  maxY,
  formatX = (x, item) => (item?.label ?? String(x)),
  formatY = (y) => String(y),
}) {
  if (!data?.length) return <div className={styles.hint}>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>;

  const w = 560, h = 160, p = 20;
  const ys = data.map(d => Number(d[yKey]) || 0);
  const minx = 0, maxx = data.length - 1;
  const miny = minY ?? Math.min(...ys);
  const maxy = maxY ?? Math.max(...ys);
  const fx = (i) => p + (i - minx) * (w - 2 * p) / Math.max(1, (maxx - minx));
  const fy = (v) => h - p - (v - miny) * (h - 2 * p) / Math.max(1, (maxy - miny));

  const path = ys.map((y, i) => `${i === 0 ? 'M' : 'L'} ${fx(i)} ${fy(y)}`).join(' ');

  const [tip, setTip] = useState(null);
  const showTip = (i) => {
    const item = data[i];
    const y = Number(item[yKey]) || 0;
    setTip({
      i,
      left: fx(i),
      top: fy(y),
      xLabel: formatX(item[xKey], item),
      yLabel: formatY(y, item),
    });
  };
  const hideTip = () => setTip(null);

  return (
    <div className={styles.chartWrap}>
      <svg className={styles.chart} viewBox={`0 0 ${w} ${h}`} onMouseLeave={hideTip} aria-hidden>
        <path d={path} fill="none" stroke="white" strokeOpacity="0.8" strokeWidth="2" />
        {ys.map((y, i) => (
          <g key={i}>
            <circle
              cx={fx(i)} cy={fy(y)} r="3"
              fill="white"
              onMouseEnter={() => showTip(i)}
              onMouseMove={() => showTip(i)}
            />
            {/* —â–µ–¥—Ä—ã–µ hit-areas –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—è */}
            <rect
              x={Math.max(0, fx(i) - 8)}
              y={Math.max(0, fy(y) - 12)}
              width="16" height="24"
              fill="transparent"
              onMouseEnter={() => showTip(i)}
              onMouseMove={() => showTip(i)}
            />
          </g>
        ))}
      </svg>

      {tip && (
        <div
          className={styles.tooltip}
          style={{
            left: Math.max(8, Math.min(tip.left + 10, w - 8)),
            top: Math.max(8, Math.min(tip.top - 8, h - 8))
          }}
        >
          <div className={styles.tooltipLine}>{tip.xLabel}</div>
          <div className={styles.tooltipValue}>{tip.yLabel}</div>
        </div>
      )}
    </div>
  );
}

export default function HistoryPage() {
  const [data, setData] = useState(null);

  // —Ñ–æ—Ä–º—ã
  const [incomeForm, setIncomeForm] = useState({ year: new Date().getFullYear(), amount: '' });
  const [weightForm, setWeightForm] = useState({ date: new Date().toISOString().slice(0,10), kg: '' });
  const [employmentForm, setEmploymentForm] = useState({ company:'', position:'', start_date:'', end_date:'', location:'', notes:'' });
  const [goalForm, setGoalForm] = useState({ year: new Date().getFullYear(), title:'', status:'planned' });
  const [travelForm, setTravelForm] = useState({ date: new Date().toISOString().slice(0,10), country:'', city:'' });
  const [resForm, setResForm] = useState({ start_date:'', end_date:'', country:'', city:'', address:'' });

  async function load(){
    const d = await get('history');
    setData(d);
  }
  useEffect(()=>{ load(); },[]);

  const incomesSorted = useMemo(()=>{
    return (data?.incomes || []).slice().sort((a,b)=>a.year-b.year);
  },[data]);

  const weightsSorted = useMemo(()=>{
    return (data?.weights || []).slice().sort((a,b)=>a.date.localeCompare(b.date));
  },[data]);

  // handlers create
  const addIncome = async ()=>{
    if (!incomeForm.year || !incomeForm.amount) return;
    await post('history/incomes', { year: Number(incomeForm.year), amount: Number(incomeForm.amount) });
    setIncomeForm(f=>({ ...f, amount: '' }));
    await load();
  };
  const addWeight = async ()=>{
    if (!weightForm.date || !weightForm.kg) return;
    await post('history/weights', { date: weightForm.date, kg: Number(weightForm.kg) });
    setWeightForm(f=>({ ...f, kg: '' }));
    await load();
  };
  const addEmployment = async ()=>{
    if (!employmentForm.company || !employmentForm.position || !employmentForm.start_date) return;
    await post('history/employments', employmentForm);
    setEmploymentForm({ company:'', position:'', start_date:'', end_date:'', location:'', notes:'' });
    await load();
  };
  const addGoal = async ()=>{
    if (!goalForm.year || !goalForm.title) return;
    await post('history/yearly_goals', goalForm);
    setGoalForm(f=>({ ...f, title:'' }));
    await load();
  };
  const addTravel = async ()=>{
    if (!travelForm.date || !travelForm.country) return;
    await post('history/travels', travelForm);
    setTravelForm({ date: new Date().toISOString().slice(0,10), country:'', city:'' });
    await load();
  };
  const addResidence = async ()=>{
    if (!resForm.start_date || !resForm.country || !resForm.city) return;
    await post('history/residences', resForm);
    setResForm({ start_date:'', end_date:'', country:'', city:'', address:'' });
    await load();
  };

  const del = async (section, id)=>{
    await remove(`history/${section}/${id}`);
    await load();
  };

  return (
    <div className={styles.page}>
      <div className={styles.wrap}>
        <div className={styles.header}>
          <div className={styles.title}>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</div>
        </div>

        <div className={styles.grid}>

          {/* –î–æ—Ö–æ–¥—ã */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–î–æ—Ö–æ–¥ –ø–æ –≥–æ–¥–∞–º</div>
            <div className={styles.row}>
              <input className={styles.input} type="number" placeholder="–ì–æ–¥"
                value={incomeForm.year} onChange={e=>setIncomeForm(f=>({...f, year:e.target.value}))}/>
              <input className={styles.input} type="number" placeholder="–°—É–º–º–∞, ‚ÇΩ"
                value={incomeForm.amount} onChange={e=>setIncomeForm(f=>({...f, amount:e.target.value}))}/>
              <button className={styles.btn} onClick={addIncome}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <LineChart
              data={incomesSorted.map(x=>({ x: x.year, y: x.amount }))}
              xKey="x"
              yKey="y"
              formatX={(x)=>String(x)}
              formatY={(y)=>new Intl.NumberFormat('ru-RU').format(Math.round(y)) + ' ‚ÇΩ'}
            />
            <div className={styles.list}>
              {(data?.incomes||[]).sort((a,b)=>b.year-a.year).map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>{r.year}: <b><Money v={r.amount}/></b></div>
                  <button className={styles.btnGhost} onClick={()=>del('incomes', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

          {/* –í–µ—Å */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–í–µ—Å</div>
            <div className={styles.row}>
              <input className={styles.input} type="date" value={weightForm.date}
                onChange={e=>setWeightForm(f=>({...f, date:e.target.value}))}/>
              <input className={styles.input} type="number" step="0.1" placeholder="–∫–≥"
                value={weightForm.kg} onChange={e=>setWeightForm(f=>({...f, kg:e.target.value}))}/>
              <button className={styles.btn} onClick={addWeight}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <LineChart
              data={weightsSorted.map((w,i)=>({ x: i, y: w.kg, label: w.date }))}
              xKey="x"
              yKey="y"
              formatX={(_, item)=>item?.label || ''}
              formatY={(y)=>`${y} –∫–≥`}
            />
            <div className={styles.list}>
              {weightsSorted.slice().reverse().map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>{r.date}: <b>{r.kg} –∫–≥</b></div>
                  <button className={styles.btnGhost} onClick={()=>del('weights', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

          {/* –†–∞–±–æ—Ç–∞ */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–†–∞–±–æ—Ç–∞ –∏ –ø–æ–∑–∏—Ü–∏–∏</div>
            <div className={styles.row}>
              <input className={styles.input} placeholder="–ö–æ–º–ø–∞–Ω–∏—è" value={employmentForm.company}
                onChange={e=>setEmploymentForm(f=>({...f, company:e.target.value}))}/>
              <input className={styles.input} placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å" value={employmentForm.position}
                onChange={e=>setEmploymentForm(f=>({...f, position:e.target.value}))}/>
            </div>
            <div className={styles.row}>
              <input className={styles.input} type="date" placeholder="–ù–∞—á–∞–ª–æ" value={employmentForm.start_date}
                onChange={e=>setEmploymentForm(f=>({...f, start_date:e.target.value}))}/>
              <input className={styles.input} type="date" placeholder="–û–∫–æ–Ω—á–∞–Ω–∏–µ (–æ–ø—Ü.)" value={employmentForm.end_date}
                onChange={e=>setEmploymentForm(f=>({...f, end_date:e.target.value}))}/>
              <input className={styles.input} placeholder="–õ–æ–∫–∞—Ü–∏—è (–æ–ø—Ü.)" value={employmentForm.location}
                onChange={e=>setEmploymentForm(f=>({...f, location:e.target.value}))}/>
              <button className={styles.btn} onClick={addEmployment}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <div className={styles.list}>
              {(data?.employments||[]).map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>
                    <b>{r.company}</b> ‚Äî {r.position} ¬∑ {r.start_date} ‚Äî {r.end_date || '–ø–æ –Ω–∞—Å—Ç.'}{r.location?` ¬∑ ${r.location}`:''}
                  </div>
                  <button className={styles.btnGhost} onClick={()=>del('employments', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

          {/* –ì–æ–¥–æ–≤—ã–µ —Ü–µ–ª–∏ */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–¶–µ–ª–∏ –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç</div>
            <div className={styles.row}>
              <input className={styles.input} type="number" placeholder="–ì–æ–¥" value={goalForm.year}
                onChange={e=>setGoalForm(f=>({...f, year:e.target.value}))}/>
              <input className={styles.input} placeholder="–¶–µ–ª—å" value={goalForm.title}
                onChange={e=>setGoalForm(f=>({...f, title:e.target.value}))}/>
              <select className={styles.input} value={goalForm.status}
                onChange={e=>setGoalForm(f=>({...f, status:e.target.value}))}>
                <option value="planned">–í –ø–ª–∞–Ω–∞—Ö</option>
                <option value="inprogress">–í —Ä–∞–±–æ—Ç–µ</option>
                <option value="done">–°–¥–µ–ª–∞–Ω–æ</option>
                <option value="dropped">–°–Ω—è—Ç–æ</option>
              </select>
              <button className={styles.btn} onClick={addGoal}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <div className={styles.list}>
              {(data?.yearly_goals||[]).map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>{r.year}: {r.title} ‚Äî <i>{r.status}</i></div>
                  <button className={styles.btnGhost} onClick={()=>del('yearly_goals', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

          {/* –ü–æ–µ–∑–¥–∫–∏ */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–ü–æ–µ–∑–¥–∫–∏</div>
            <div className={styles.row}>
              <input className={styles.input} type="date" value={travelForm.date}
                onChange={e=>setTravelForm(f=>({...f, date:e.target.value}))}/>
              <input className={styles.input} placeholder="–°—Ç—Ä–∞–Ω–∞" value={travelForm.country}
                onChange={e=>setTravelForm(f=>({...f, country:e.target.value}))}/>
              <input className={styles.input} placeholder="–ì–æ—Ä–æ–¥ (–æ–ø—Ü.)" value={travelForm.city}
                onChange={e=>setTravelForm(f=>({...f, city:e.target.value}))}/>
              <button className={styles.btn} onClick={addTravel}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <div className={styles.list}>
              {(data?.travels||[]).map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>{r.date}: {r.country}{r.city?` ‚Äî ${r.city}`:''}</div>
                  <button className={styles.btnGhost} onClick={()=>del('travels', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

          {/* –ì–¥–µ –∂–∏–ª */}
          <div className={styles.card}>
            <div className={styles.cardTitle}>–ì–¥–µ –∂–∏–ª</div>
            <div className={styles.row}>
              <input className={styles.input} type="date" placeholder="–ù–∞—á–∞–ª–æ" value={resForm.start_date}
                onChange={e=>setResForm(f=>({...f, start_date:e.target.value}))}/>
              <input className={styles.input} type="date" placeholder="–û–∫–æ–Ω—á–∞–Ω–∏–µ (–æ–ø—Ü.)" value={resForm.end_date}
                onChange={e=>setResForm(f=>({...f, end_date:e.target.value}))}/>
            </div>
            <div className={styles.row}>
              <input className={styles.input} placeholder="–°—Ç—Ä–∞–Ω–∞" value={resForm.country}
                onChange={e=>setResForm(f=>({...f, country:e.target.value}))}/>
              <input className={styles.input} placeholder="–ì–æ—Ä–æ–¥" value={resForm.city}
                onChange={e=>setResForm(f=>({...f, city:e.target.value}))}/>
              <input className={styles.input} placeholder="–ê–¥—Ä–µ—Å (–æ–ø—Ü.)" value={resForm.address}
                onChange={e=>setResForm(f=>({...f, address:e.target.value}))}/>
              <button className={styles.btn} onClick={addResidence}>–î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
            <div className={styles.list}>
              {(data?.residences||[]).map(r=>(
                <div key={r.id} className={styles.item}>
                  <div>{r.start_date} ‚Äî {r.end_date || '–ø–æ –Ω–∞—Å—Ç.'}: {r.city}, {r.country}{r.address?` ‚Äî ${r.address}`:''}</div>
                  <button className={styles.btnGhost} onClick={()=>del('residences', r.id)}>–£–¥–∞–ª–∏—Ç—å</button>
                </div>
              ))}
            </div>
          </div>

        </div>
      </div>
    </div>
  );
}